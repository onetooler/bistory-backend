// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account": {
            "post": {
                "description": "Create a new account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Create a new account",
                "parameters": [
                    {
                        "description": "a new account data for creating",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAccountDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to create a new account.",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication. Returns false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/account/find-login-id": {
            "post": {
                "description": "Find LoginId By Email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Find LoginId By Email",
                "parameters": [
                    {
                        "description": "Account Email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.FindLoginIdDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to send email.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Failed to send email.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication. Returns false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/account/{accountId}": {
            "get": {
                "description": "Get a account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get a account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication. Returns false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the existing account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Delete the existing account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the account password data for updating",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteAccountDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to delete the existing account.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Failed to the delete.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication. Returns false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/account/{accountId}/": {
            "post": {
                "description": "Change account password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Change account password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the account password data for updating",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeAccountPasswordDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to change the account password.",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Failed to the update.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication. Returns false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login using loginId and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login using loginId and password.",
                "parameters": [
                    {
                        "description": "User name and Password for logged-in.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to the authentication.",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/auth/loginAccount": {
            "get": {
                "description": "Get the account data of logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get the account data of logged-in user.",
                "responses": {
                    "200": {
                        "description": "Success to fetch the account data. If the security function is disable, it returns disabled message",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "401": {
                        "description": "The current user haven't logged-in yet. Returns false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/auth/loginStatus": {
            "get": {
                "description": "Get the login status of current logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get the login status.",
                "responses": {
                    "200": {
                        "description": "The current user have already logged-in. Returns true.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "401": {
                        "description": "The current user haven't logged-in yet. Returns false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the status of this application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Get the status of this application",
                "responses": {
                    "200": {
                        "description": "healthy: This application is started.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "None: This application is stopped.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ChangeAccountPasswordDto": {
            "type": "object",
            "properties": {
                "NewPassword": {
                    "type": "string"
                },
                "oldPassword": {
                    "type": "string"
                }
            }
        },
        "dto.CreateAccountDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "loginId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteAccountDto": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.FindLoginIdDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.LoginDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "loginId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "model.Account": {
            "type": "object",
            "properties": {
                "authority": {
                    "$ref": "#/definitions/model.Authority"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "loginFailCount": {
                    "type": "integer"
                },
                "loginId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.Status"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Authority": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "AuthorityAdmin",
                "AuthorityUser"
            ]
        },
        "model.Status": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusInactive"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "bistory-backend API",
	Description:      "This is API specification for bistory-backend project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
